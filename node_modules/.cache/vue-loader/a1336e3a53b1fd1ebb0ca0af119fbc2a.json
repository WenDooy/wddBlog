{"remainingRequest":"C:\\wdd\\webstorm\\vue-project\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\wdd\\webstorm\\vue-project\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\wdd\\webstorm\\vue-project\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\wdd\\webstorm\\vue-project\\src\\components\\markdown\\index.vue?vue&type=template&id=1e03e4c2&lang=html&","dependencies":[{"path":"C:\\wdd\\webstorm\\vue-project\\src\\components\\markdown\\index.vue","mtime":1590907721985},{"path":"C:\\wdd\\webstorm\\vue-project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\wdd\\webstorm\\vue-project\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\wdd\\webstorm\\vue-project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\wdd\\webstorm\\vue-project\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}